Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> header rows
Rule 2     header -> row
Rule 3     rows -> row row
Rule 4     row -> VAL
Rule 5     row -> VAL COMMA row

Terminals, with rules where they appear

COMMA                : 5
VAL                  : 4 5
error                : 

Nonterminals, with rules where they appear

file                 : 0
header               : 1
row                  : 2 3 3 5
rows                 : 1

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . header rows
    (2) header -> . row
    (4) row -> . VAL
    (5) row -> . VAL COMMA row

    VAL             shift and go to state 4

    file                           shift and go to state 1
    header                         shift and go to state 2
    row                            shift and go to state 3

state 1

    (0) S' -> file .



state 2

    (1) file -> header . rows
    (3) rows -> . row row
    (4) row -> . VAL
    (5) row -> . VAL COMMA row

    VAL             shift and go to state 4

    rows                           shift and go to state 5
    row                            shift and go to state 6

state 3

    (2) header -> row .

    VAL             reduce using rule 2 (header -> row .)


state 4

    (4) row -> VAL .
    (5) row -> VAL . COMMA row

    VAL             reduce using rule 4 (row -> VAL .)
    $end            reduce using rule 4 (row -> VAL .)
    COMMA           shift and go to state 7


state 5

    (1) file -> header rows .

    $end            reduce using rule 1 (file -> header rows .)


state 6

    (3) rows -> row . row
    (4) row -> . VAL
    (5) row -> . VAL COMMA row

    VAL             shift and go to state 4

    row                            shift and go to state 8

state 7

    (5) row -> VAL COMMA . row
    (4) row -> . VAL
    (5) row -> . VAL COMMA row

    VAL             shift and go to state 4

    row                            shift and go to state 9

state 8

    (3) rows -> row row .

    $end            reduce using rule 3 (rows -> row row .)


state 9

    (5) row -> VAL COMMA row .

    VAL             reduce using rule 5 (row -> VAL COMMA row .)
    $end            reduce using rule 5 (row -> VAL COMMA row .)

